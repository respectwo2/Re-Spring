pipeline {
    agent any
    tools {
        dockerTool 'DefaultDocker'
        nodejs 'NodeJS-20'
    }
    environment {
        BRANCH_NAME = "${env.BRANCH_NAME ?: env.GIT_BRANCH}"
        SPRING_DATASOURCE_URL = credentials('SPRING_DATASOURCE_URL')
        SPRING_DATASOURCE_USERNAME = credentials('SPRING_DATASOURCE_USERNAME')
        SPRING_DATASOURCE_PASSWORD = credentials('SPRING_DATASOURCE_PASSWORD')
        MONGODB_URI = credentials('MONGODB_URI')
        MONGODB_DATABASE = credentials('MONGODB_DATABASE')
        ELASTICSEARCH_URI = credentials('ELASTICSEARCH_URI')
        ELASTICSEARCH_USERNAME = credentials('ELASTICSEARCH_USERNAME')
        ELASTICSEARCH_PASSWORD = credentials('ELASTICSEARCH_PASSWORD')
        REDIS_HOST = credentials('REDIS_HOST')
        REDIS_PORT = credentials('REDIS_PORT')
        REDIS_PASSWORD = credentials('REDIS_PASSWORD')
        S3_BUCKET = credentials('S3_BUCKET')
        S3_ACCESSKEY = credentials('S3_ACCESSKEY')
        S3_SECRETKEY = credentials('S3_SECRETKEY')
        S3_REGION = credentials('S3_REGION')
        NEXT_PUBLIC_API_BASE_URL = credentials('NEXT_PUBLIC_API_BASE_URL')
    }
    stages {
        stage('Checkout') {
            steps {
                script {
                    echo "현재 브랜치: ${BRANCH_NAME}"
                    checkout scm
                }
            }
        }

        stage('Build & Test') {
            when {
                expression { BRANCH_NAME == 'main' }
            }
            steps {
                parallel (
                    backendBuild: {
                        dir('backend') {
                            sh 'chmod +x ./gradlew'
                            sh './gradlew clean build'
                        }
                    },
                    frontendBuild: {
                        dir('frontend') {
                            sh 'npm install'
                            sh 'npm run build'
                        }
                    }
                )
            }
        }

        stage('Build & Push Docker Images') {
            when {
                expression { BRANCH_NAME == 'deploy' }
            }
            steps {
                withDockerRegistry([credentialsId: 'docker-hub-credentials']) {
                    parallel (
                        backendPush: {
                            sh '''
                            docker build -t ${DOCKER_USERNAME}/myapp-backend:latest ./backend
                            docker push ${DOCKER_USERNAME}/myapp-backend:latest
                            '''
                        },
                        frontendPush: {
                            sh '''
                            docker build -t ${DOCKER_USERNAME}/myapp-frontend:latest ./frontend
                            docker push ${DOCKER_USERNAME}/myapp-frontend:latest
                            '''
                        }
                    )
                }
            }
        }

        stage('Deploy Backend') {
            when {
                expression { BRANCH_NAME == 'deploy' }
            }
            steps {
                sshagent(['deploy-server-credentials']) {
                    sh '''
                    ssh user@server "
                        docker pull ${DOCKER_USERNAME}/myapp-backend:latest && \
                        docker-compose -f docker-compose.yml up -d --no-recreate backend && \
                        docker image prune -f
                    "
                    '''
                }
            }
        }

        stage('Deploy Frontend') {
            when {
                expression { BRANCH_NAME == 'deploy' }
            }
            steps {
                sshagent(['deploy-server-credentials']) {
                    sh '''
                    ssh user@server "
                        docker pull ${DOCKER_USERNAME}/myapp-frontend:latest && \
                        docker-compose -f docker-compose.yml up -d --no-recreate frontend && \
                        docker image prune -f
                    "
                    '''
                }
            }
        }

        stage('Check Running Containers') {
            when {
                expression { BRANCH_NAME == 'deploy' }
            }
            steps {
                script {
                    sh 'docker ps -a'
                }
            }
        }
    }
    post {
        always {
            script {
                sh 'docker system prune -f'
            }
        }
    }
}
